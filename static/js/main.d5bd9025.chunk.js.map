{"version":3,"sources":["components/Formulario.js","components/Letra.js","components/Informacion.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","consultarAPILetra","useState","artista","cancion","busqueda","setBusqueda","actualizarState","e","target","name","value","className","onSubmit","preventDefault","type","placeholder","required","onChange","Letra","letra","length","Informacion","info","Object","keys","src","strArtistThumb","alt","strArtist","strGenre","strBiographyES","href","strFacebook","strTwitter","strFMChart","App","setArtista","setLetra","setInfo","a","url","axios","response","data","lyrics","consultarAPIInfo","artists","useEffect","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5bd9025.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nexport default function Formulario ({consultarAPILetra}) {\n\n  const [busqueda, setBusqueda] = useState({\n    artista: '',\n    cancion: ''\n  })\n\n  const actualizarState = e => {\n    setBusqueda({\n      ...busqueda,\n      [e.target.name] : e.target.value\n    })\n  }\n\n  const submitInfo = e => {\n    e.preventDefault()\n    consultarAPILetra(busqueda)\n  }\n\n  return(\n    <div className=\"bg-info\">\n          <div className=\"container\">\n              <div className=\"row\">\n                  <form \n                    onSubmit={submitInfo}\n                    className=\"col card text-white bg-transparent  mb-5 pt-5 pb-2\">\n                      <fieldset>\n                          <legend className=\"text-center\">Buscador Letras Canciones</legend>\n                          <div className=\"row\">\n                              <div className=\"col-md-6\">\n                                <div className=\"form-group\">\n                                    <label>Artista</label>\n                                    <input \n                                        type=\"text\" \n                                        className=\"form-control\" \n                                        name=\"artista\" \n                                        placeholder=\"Nombre Artista\" \n                                        required\n                                        onChange={actualizarState}\n                                        />\n                                </div>\n                              </div>\n                              <div className=\"col-md-6\">\n                                <div className=\"form-group\">\n                                    <label>Canción</label>\n                                    <input \n                                        type=\"text\" \n                                        className=\"form-control\" \n                                        name=\"cancion\" \n                                        placeholder=\"Nombre Canción\" \n                                        required\n                                        onChange={actualizarState}\n                                    />\n                                </div>\n                              </div>\n                          </div>\n                          <button type=\"submit\" className=\"btn btn-primary float-right\">Buscar</button>\n                      </fieldset>\n                  </form>\n              </div>\n          </div>\n      </div>\n  )\n}","import React, {Fragment} from 'react';\n\nexport default function Letra ({letra}) {\n  if(letra.length){\n    return(\n      <Fragment>\n        <h2>Letra Canción</h2>\n        <p className=\"letra\">{letra}</p>\n      </Fragment>\n    )\n  }\n  return ''\n}","import React, {Fragment} from 'react';\n\nexport default function Informacion ({info}) {\n  if(Object.keys(info).length){\n    return(\n      <div className=\"card border-light\">\n        <div className=\"card-header bg-primary text-light font-wight-bold\">\n          Informacion Artistica\n        </div>\n        <div className=\"card-body\">\n          <img src={info.strArtistThumb} alt={info.strArtist}/>\n          <p className=\"card-text\">Genero{info.strGenre}</p>\n          <h2 className=\"card-text text-center\">Biografía de {info.strArtist}</h2>\n          <p className=\"card-text\">{info.strBiographyES}</p>\n          <p className=\"card-text\">\n            <a href={`https://${info.strFacebook}`} target=\"_blank\">\n              <i className=\"fab fa-facebook\"></i>\n            </a>\n            <a href={`https://${info.strTwitter}`} target=\"_blank\">\n              <i className=\"fab fa-twitter\"></i>\n            </a>\n            <a href={`https://${info.strFMChart}`} target=\"_blank\">\n              <i className=\"fab fa-lastfm\"></i>\n            </a>\n          </p>\n        </div>\n      </div>\n    )\n  }\n  return ''\n}","import React, {useState, useEffect, Fragment} from 'react';\nimport Formulario from './components/Formulario'\nimport Letra from './components/Letra'\nimport Informacion from './components/Informacion'\nimport axios from 'axios'\n\nfunction App() {\n  \n  const [artista, setArtista] = useState('')\n  const [letra, setLetra] = useState([])\n  const [info, setInfo] = useState({})\n  \n  const consultarAPILetra = async busqueda => {\n    const {cancion, artista} = busqueda\n    const url = `https://api.lyrics.ovh/v1/${artista}/${cancion}`\n\n    const response = await axios(url)\n\n    setArtista(artista)\n\n    setLetra(response.data.lyrics)\n  }\n\n  const consultarAPIInfo = async ()=> {\n    const url = `http://theaudiodb.com/api/v1/json/1/search.php?s=${artista}`\n    const response = await axios(url)\n    setInfo(response.data.artists[0])\n  }\n    \n  useEffect(\n    () => {\n      console.log(\"agregaste un artista\")\n      if(artista){\n        setInfo({})\n        consultarAPIInfo()\n      }\n    },[artista]\n  )\n\n  return(\n    <Fragment>\n      <Formulario consultarAPILetra={consultarAPILetra}/>\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            {<Informacion info={info}/>}\n          </div>\n          <div className=\"col-md-6\">\n            {<Letra letra={letra}/>}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}